@using System.ComponentModel
@using ToolGiamSatNguoiRaVaoCang.Services
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject SizeListener sizeListener
@inject IJSRuntime _JS

<div class="page-header">
    <DxButton Click="ToggleNavbar"
    NavigateUrl="@UrlGenerator.GetUrl(new Uri(NavigationManager.Uri).LocalPath, !IsToggled)"
    CssClass="menu-button"
    IconCssClass="icon icon-menu"
    RenderStyle="@ButtonRenderStyle.Secondary"
    RenderStyleMode="ButtonRenderStyleMode.Text"></DxButton>
    <DxButton NavigateUrl="/" RenderStyle="ButtonRenderStyle.None" RenderStyleMode="ButtonRenderStyleMode.Text">
        <img src="/images/logo.png" width="97" height="35" alt="logo" />
    </DxButton>
    <DxButton RenderStyle="ButtonRenderStyle.None"
    Text="LAIP" CssClass="title"
    RenderStyleMode="ButtonRenderStyleMode.Text"
    NavigateUrl="/" />
    <div class="flex-space"></div>
    <AuthorizeView Context="AuthContext">
        <Authorized>
            <div class="header-item-right">
                <NavLink href="Account/Manage">
                    <DxButton RenderStyle="@ButtonRenderStyle.Primary"
                    Text="@userButton"
                    CssClass="menu-button-nav"
                    RenderStyleMode="@ButtonRenderStyleMode.Outline"
                    IconCssClass="bi bi-person-circle"></DxButton>
                </NavLink>
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="" />
                    <DxButton RenderStyle="@ButtonRenderStyle.Primary"
                    SubmitFormOnClick="true"
                    Text="@logoutButton"
                    RenderStyleMode="@ButtonRenderStyleMode.Outline"
                    CssClass="menu-button-nav"
                    IconCssClass="bi bi-box-arrow-left"></DxButton>
                </form>
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="header-item-right">
                <NavLink href="Account/Register">
                    <DxButton RenderStyle="@ButtonRenderStyle.Primary"
                    Text="@registerButton"
                    RenderStyleMode="@ButtonRenderStyleMode.Outline"
                    CssClass="menu-button-nav"
                    IconCssClass="bi bi-r-circle"></DxButton>
                </NavLink>
                <NavLink href="Account/Login">
                    <DxButton RenderStyle="@ButtonRenderStyle.Primary"
                    Text="@loginButton"
                    RenderStyleMode="@ButtonRenderStyleMode.Outline"
                    CssClass="menu-button-nav"
                    IconCssClass="bi bi-box-arrow-in-right"></DxButton>
                </NavLink>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    [Parameter]
    public EventCallback<bool> ToggleSidebar { get; set; }

    [Parameter]
    public bool IsToggled { get; set; }

    private async Task ToggleNavbar()
    {
        await ToggleSidebar.InvokeAsync(IsToggled);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
            var user = authstate.User;
            username = user.Identity.Name;

            sizeListener.Init(_JS);
            sizeListener.Size += UpdateValue;
        }
    }
    string registerButton { get; set; } = "Register";
    string loginButton { get; set; } = "Log in";
    string userButton { get; set; } = username;
    string logoutButton { get; set; } = "Log out";

    static string username { get; set; }

    private void UpdateValue(object sender, bool isDesktop)
    {
        if (isDesktop)
        {
            registerButton = "Register";
            loginButton = "Log in";
            userButton = username;
            logoutButton = "Log out";
        }
        else
        {
            registerButton = string.Empty;
            loginButton = string.Empty;
            userButton = string.Empty;
            logoutButton = string.Empty;
        }
        StateHasChanged();
    }
}
