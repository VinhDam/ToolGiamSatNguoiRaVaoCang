@using DevExpress.Blazor.Internal
@using ToolGiamSatNguoiRaVaoCang.Utilities
@implements IDisposable
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager


<div class="page">
    <div class="header">
        <DxMenu CssClass="navbar navbar-expand-lg navbar-dark bg-primary header-menu" CollapseItemsToHamburgerMenu="true"
                CollapseItemToIconMode="MenuCollapseItemToIconMode.Sequentially"
                DisplayMode="MenuDisplayMode.Desktop">
            <Items>
                <DxMenuItem>
                    <Template>
                        <button class="btn btn-secondary" onclick="MenuToggle()">☰</button>
                    </Template>
                </DxMenuItem>
                <DxMenuItem>
                    <Template>
                        <div class="LAIP-title">LAIP</div>
                    </Template>
                </DxMenuItem>
                <DxMenuItem Position="ItemPosition.End">
                    <Template>
                        <AuthorizeView Context="AuthContext">
                            <Authorized>
                                <NavLink href="Account/Manage" class="button-link menubutton-float-end display-desktop">
                                    <DxButton RenderStyle="@ButtonRenderStyle.Light" Text="@AuthContext.User.Identity?.Name" RenderStyleMode="@ButtonRenderStyleMode.Text" CssClass="menu-button" IconCssClass="bi bi-person-circle"></DxButton>
                                </NavLink>
                            </Authorized>
                        </AuthorizeView>
                    </Template>
                </DxMenuItem>
                <DxMenuItem Position="ItemPosition.End">
                    <Template>
                        <AuthorizeView Context="AuthContext">
                            <Authorized>
                                <form action="Account/Logout" method="post" class="display-desktop">
                                    <AntiforgeryToken />
                                    <input type="hidden" name="ReturnUrl" value="" />
                                    <DxButton RenderStyle="@ButtonRenderStyle.Light" SubmitFormOnClick="true" Text="Log out" RenderStyleMode="@ButtonRenderStyleMode.Text" CssClass="menu-button" IconCssClass="bi bi-box-arrow-left"></DxButton>
                                </form>
                            </Authorized>
                        </AuthorizeView>
                    </Template>
                </DxMenuItem>
                <DxMenuItem Position="ItemPosition.End">
                    <Template>
                        <AuthorizeView Context="AuthContext">
                            <NotAuthorized>
                                <NavLink href="Account/Register" class="button-link menubutton-float-end display-desktop">
                                    <DxButton RenderStyle="@ButtonRenderStyle.Light" Text="Register" RenderStyleMode="@ButtonRenderStyleMode.Text" CssClass="menu-button-nav" IconCssClass="bi bi-r-circle"></DxButton>
                                </NavLink>
                            </NotAuthorized>
                        </AuthorizeView>
                    </Template>
                </DxMenuItem>
                <DxMenuItem Position="ItemPosition.End">
                    <Template>
                        <AuthorizeView Context="AuthContext">
                            <NotAuthorized>
                                <NavLink href="Account/Login" class="button-link menubutton-float-end display-desktop">
                                    <DxButton RenderStyle="@ButtonRenderStyle.Light" Text="Log in" RenderStyleMode="@ButtonRenderStyleMode.Text" CssClass="menu-button-nav" IconCssClass="bi bi-box-arrow-in-right"></DxButton>
                                </NavLink>
                            </NotAuthorized>
                        </AuthorizeView>
                    </Template>
                </DxMenuItem>
            </Items>
        </DxMenu>
    </div>
    <div class="main">
        <div id="menu">
            <div id="expand-menu">
                <DxMenu Orientation="@Orientation.Vertical"
                        CssClass="expand-menu-item"
                        DisplayMode="MenuDisplayMode.Auto">
                    <Items>
                        <DxMenuItem>
                            <Template>
                                <DxComboBox Data="@MenuList"
                                            Value="@item"
                                            ValueChanged="@((Item country) => FilterList(country))"
                                            SearchMode="@ListSearchMode.AutoSearch"
                                            TextFieldName="@nameof(Item.VietName)"
                                            SearchFilterCondition="ListSearchFilterCondition.Contains"
                                            ListRenderMode="ListRenderMode.Virtual"
                                            NullText="Tìm kiếm" CssClass="search-box" />
                            </Template>
                        </DxMenuItem>
                        <DxMenuItem NavigateUrl="/" Text="Dashboard" CssClass="menu-item" IconCssClass="bi bi-house-door-fill"></DxMenuItem>
                        <DxMenuItem NavigateUrl="/company" Text="Công ty" CssClass="menu-item" IconCssClass="bi bi-building"></DxMenuItem>
                    </Items>
                </DxMenu>
            </div>
            <div id="hidden-menu" class="hidden">
                <DxMenu Orientation="@Orientation.Vertical"
                        CssClass="hidden-menu-item"
                        DisplayMode="MenuDisplayMode.Auto">
                    <Items>
                        <DxMenuItem NavigateUrl="/" CssClass="menu-item" IconCssClass="bi bi-house-door-fill"></DxMenuItem>
                        <DxMenuItem NavigateUrl="/company" CssClass="menu-item" IconCssClass="bi bi-building"></DxMenuItem>
                    </Items>
                </DxMenu>
            </div>
        </div>
        <div class="content">
            @Body
        </div>
    </div>
</div>


<script>
    function MenuToggle() {
        document.getElementById("expand-menu").classList.toggle('hidden');
        if($("#menu").css("width")=="30px"){
            document.getElementById("menu").style.width="15rem";
        }else{
            document.getElementById("menu").style.width="30px";
        }
        document.getElementById("hidden-menu").classList.toggle('hidden');
    }
</script>

@code {
    public bool ShowNavMenu { get; set; }
    public string? searchText { get; set; }

    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

@code {
    class Item
    {
        public string VietName { get; set; }
        public string EngName { get; set; }
    }
    private List<Item> MenuList { get; set; } = new()
    {
        new Item { VietName="Dashboard", EngName=""},
        new Item { VietName="Công ty", EngName="Company"},
    };
    private List<Item> FilterMenuList { get; set; } = new();
    private Item item { get; set; } = new();
    private async Task FilterList(Item searchText)
    {
        NavigationManager.NavigateTo($"/{searchText.EngName}");
    }
}