@using BlazorBootstrap
@using DevExpress.Blazor.Internal
@using ToolGiamSatNguoiRaVaoCang.StaticData
@using ToolGiamSatNguoiRaVaoCang.Utilities
@implements IDisposable
@inject IJSRuntime _JS
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager


<div class="page">
    <div class="header">
        <div class="header-item">
            <div>
                <button class="toggle-button bi bi-list" onclick="MenuToggle()" />
            </div>
            <div>
                <img src="~/images/logo.svg" />
            </div>
            <div>
                <div class="title">LAIP</div>
            </div>
        </div>
        <div class="flex-space header-item" />
        <AuthorizeView Context="AuthContext">
            <Authorized>
                <div class="header-item header-item-right">
                    <NavLink href="Account/Manage">
                        <DxButton RenderStyle="@ButtonRenderStyle.Primary"
                        Text="@AuthContext.User.Identity?.Name"
                        CssClass="menu-button-nav"
                        RenderStyleMode="@ButtonRenderStyleMode.Contained"
                        IconCssClass="bi bi-person-circle"></DxButton>
                    </NavLink>
                </div>
                <div class="header-item header-item-right">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="" />
                        <DxButton RenderStyle="@ButtonRenderStyle.Primary"
                        SubmitFormOnClick="true" Text="Log out"
                        RenderStyleMode="@ButtonRenderStyleMode.Outline"
                        CssClass="menu-button-nav"
                        IconCssClass="bi bi-box-arrow-left"></DxButton>
                    </form>

                </div>
            </Authorized>
            <NotAuthorized>
                <div class="header-item header-item-right">
                    <NavLink href="Account/Register">
                        <DxButton RenderStyle="@ButtonRenderStyle.Primary"
                        Text="Register"
                        RenderStyleMode="@ButtonRenderStyleMode.Contained"
                        CssClass="menu-button-nav"
                        IconCssClass="bi bi-r-circle"></DxButton>
                    </NavLink>
                </div>
                <div class="header-item header-item-right">
                    <NavLink href="Account/Login">
                        <DxButton RenderStyle="@ButtonRenderStyle.Primary"
                        Text="Log in"
                        RenderStyleMode="@ButtonRenderStyleMode.Outline"
                        CssClass="menu-button-nav"
                        IconCssClass="bi bi-box-arrow-in-right"></DxButton>
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </div>
    <div class="body">
        <div id="side-navbar">
            <div id="search-box-area">
                <DxTextBox @bind-Text="@searchText"
                BindValueMode="BindValueMode.OnInput"
                NullText="Tìm kiếm"
                CssClass="search-box"
                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto">
                    <Buttons>
                        <DxEditorButton IconCssClass="icon icon-search" CssClass="search-button" />
                    </Buttons>
                </DxTextBox>
            </div>
            <div id="expanded-menu">
                <DxTreeView AnimationType="LayoutAnimationType.Slide">
                    <Nodes>
                        <DxTreeViewNode NavigateUrl="/" Text="Công ty" />
                        <DxTreeViewNode Text="Danh mục">
                            <Nodes>
                                <DxTreeViewNode NavigateUrl="/company" Text="Công ty" AllowSelection="true"/>
                                <DxTreeViewNode NavigateUrl="/shift" Text="Ca làm việc" AllowSelection="true" />
                            </Nodes>
                        </DxTreeViewNode>
                    </Nodes>
                </DxTreeView>
            </div>
        </div>
        <div id="body">
            <div class="navigator">
                <a href="/" class="navigator-item">Home</a>
                @if (breadcrumb!=null){
                    <i class="bi bi-caret-right-fill navigator-item"></i>
                    <a class="navigator-item">@breadcrumb.ParentName</a>
                    <i class="bi bi-caret-right-fill navigator-item"></i>
                    <a class="navigator-item">@breadcrumb.VietName</a>
                }
            </div>
            <div class="content">
                @Body
            </div>
        </div>
    </div>
</div>


<script>
    function MenuToggle(){
    if(document.getElementById("side-navbar").style.width!="0px"){
    document.getElementById("side-navbar").style.width="0px";
    document.getElementById("search-box-area").style.width="0px";
    document.getElementById("search-box").style.width="0px";
    document.getElementById("expanded-menu").style.width="0px";
    }else{
    document.getElementById("side-navbar").style.width="330px";
    document.getElementById("search-box-area").style.width="auto";
    document.getElementById("search-box").style.width="auto";
    document.getElementById("expanded-menu").style.width="auto";
    }
    }

</script>

@code {
    public string? searchText { get; set; }

    private string? currentUrl;

    protected override async void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        breadcrumb = null;
        @if (!string.IsNullOrEmpty(currentUrl)){
            breadcrumb = BreadCrumbList.Where(u => u.EngName.Contains(currentUrl, StringComparison.OrdinalIgnoreCase)).FirstOrDefault();
        }
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

@code {
    public BreadCrumb breadcrumb { get; set; }
    public List<BreadCrumb> BreadCrumbList { get; set; } = new List<BreadCrumb>
        {
            new BreadCrumb {ParentName = "Danh mục", VietName = "Công ty", EngName="Company" },
            new BreadCrumb {ParentName = "Danh mục", VietName = "Ca làm việc", EngName="Shift" }
        };
}