@using BlazorBootstrap
@using DevExpress.Blazor.Internal
@using ToolGiamSatNguoiRaVaoCang.DataProvider
@using ToolGiamSatNguoiRaVaoCang.Services
@using ToolGiamSatNguoiRaVaoCang.Utilities
@implements IDisposable
@inject IJSRuntime _JS
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject SizeListener sizeListener
@inject ISearchItemDataProvider searchItemDataProvider


<div class="page">
    <div class="header">
        <div class="header-item toggle-button-container">
            <button class="toggle-button bi bi-list" @onclick="ToggleNavbar" />
        </div>
        <div class="header-item logo">
            <DxButton NavigateUrl="/" RenderStyle="ButtonRenderStyle.None" RenderStyleMode="ButtonRenderStyleMode.Text" Click="TitleOnClick">
                <img src="/images/logo.png" width="97" height="35" alt="logo" />
            </DxButton>
        </div>
        <div class="header-item">
            <DxButton RenderStyle="ButtonRenderStyle.None"
            Text="LAIP"
            CssClass="title"
            Click="TitleOnClick" NavigateUrl="/" />
        </div>
        <div class="flex-space header-item" />
        <AuthorizeView Context="AuthContext">
            <Authorized>
                <div class="header-item header-item-right">
                    <NavLink href="Account/Manage">
                        <DxButton RenderStyle="@ButtonRenderStyle.Primary"
                        Text="@AuthContext.User.Identity?.Name"
                        CssClass="menu-button-nav"
                        RenderStyleMode="@ButtonRenderStyleMode.Outline"
                        IconCssClass="bi bi-person-circle user"></DxButton>
                    </NavLink>
                </div>
                <div class="header-item header-item-right">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="" />
                        <DxButton RenderStyle="@ButtonRenderStyle.Primary"
                        SubmitFormOnClick="true" Text="Log out"
                        RenderStyleMode="@ButtonRenderStyleMode.Outline"
                        CssClass="menu-button-nav logout"
                        IconCssClass="bi bi-box-arrow-left"></DxButton>
                    </form>

                </div>
            </Authorized>
            <NotAuthorized>
                <div class="header-item header-item-right">
                    <NavLink href="Account/Register">
                        <DxButton RenderStyle="@ButtonRenderStyle.Primary"
                        Text="Register"
                        RenderStyleMode="@ButtonRenderStyleMode.Outline"
                        CssClass="menu-button-nav register"
                        IconCssClass="bi bi-r-circle"></DxButton>
                    </NavLink>
                </div>
                <div class="header-item header-item-right">
                    <NavLink href="Account/Login">
                        <DxButton RenderStyle="@ButtonRenderStyle.Primary"
                        Text="Log in"
                        RenderStyleMode="@ButtonRenderStyleMode.Outline"
                        CssClass="menu-button-nav login"
                        IconCssClass="bi bi-box-arrow-in-right"></DxButton>
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </div>
    <div class="body">
        <div id="body-side-navbar" class="@NavbarStyle">
            <div id="search-box-area">
                <DxTextBox Text="@searchText"
                TextExpression="()=>searchText"
                BindValueMode="BindValueMode.OnInput"
                NullText="Tìm kiếm"
                CssClass="search-box"
                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                TextChanged="(value)=>GenerateSearchArea(value)">
                    <Buttons>
                        <DxEditorButton IconCssClass="icon icon-search" CssClass="search-button" />
                    </Buttons>
                </DxTextBox>
            </div>
            <div id="expanded-menu">
                @if (searchItems.Any())
                {
                    @for (int i = 0; i < searchItems.Count; i++)
                    {
                        <ul>
                            <li class="search-result-area">
                                <div class="item-name" href="/@searchItems[i].ParentName.EngName/@searchItems[i].ItemName.EngName">
                                    @searchItems[i].ItemName.VietName
                                </div>
                                <div class="item-tree">
                                    <a class="search-item">@searchItems[i].ParentName.VietName</a>
                                    <i class="bi bi-caret-right-fill search-item"></i>
                                    <a class="search-item" href="/@searchItems[i].ParentName.EngName/@searchItems[i].ItemName.EngName">
                                        @searchItems[i].ItemName.VietName
                                    </a>
                                </div>
                            </li>
                        </ul>
                    }
                    <hr />
                }
                <DxTreeView AnimationType="LayoutAnimationType.Slide">
                    <Nodes>
                        <DxTreeViewNode NavigateUrl="/" Text="Dashboard" />
                        <DxTreeViewNode Text="Danh mục">
                            <Nodes>
                                <DxTreeViewNode AllowSelection="true" CssClass="treeview-item">
                                    <Template>
                                        <DxButton NavigateUrl="/menu/company" Context="btnContext" RenderStyle="ButtonRenderStyle.None" RenderStyleMode="ButtonRenderStyleMode.Text">
                                            Công ty @StatusDot
                                        </DxButton>
                                    </Template>    
                                </DxTreeViewNode>
                                <DxTreeViewNode  Text="Ca làm việc" AllowSelection="true" CssClass="treeview-item">
                                    <Template>
                                        <DxButton NavigateUrl="/menu/shift" Context="btnContext" RenderStyle="ButtonRenderStyle.None" RenderStyleMode="ButtonRenderStyleMode.Text">
                                            Ca làm việc   @StatusBadge
                                        </DxButton>
                                    </Template>
                                </DxTreeViewNode>
                            </Nodes>
                        </DxTreeViewNode>
                    </Nodes>
                </DxTreeView>
            </div>
            <div id="side-navbar-footer">
                <div id="footer-item-1">Version: 1.0</div>
                <div id="footer-item-2">Copyright: © 2024-2025</div>
            </div>
        </div>
        <div id="body-content" class="@ContentStyle">
            <div class="navigator">
                <a href="/" class="navigator-item">Home</a>
                @if (breadcrumb != null)
                {
                    <i class="bi bi-caret-right-fill navigator-item"></i>
                    <a class="navigator-item">@breadcrumb.ParentName.VietName</a>
                    <i class="bi bi-caret-right-fill navigator-item"></i>
                    <a class="navigator-item">@breadcrumb.ItemName.VietName</a>
                }
            </div>
            <div class="content">
                @Body
            </div>
        </div>
    </div>
</div>



@code {
    private string? currentUrl;

    protected override async void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Items = searchItemDataProvider.GenerateSearchItemDatas();

            sizeListener.Init(_JS);
            sizeListener.Size += UpdateValue;
        }
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location); ;
        if (!NavbarStyle.Contains("sidebar-hidden") && !bigWindowSize)
        {
            NavbarStyle = "sidebar-hidden";
            ContentStyle = "content-mobile-show";
        }
        breadcrumb = null;
        @if (!string.IsNullOrEmpty(currentUrl))
        {
            breadcrumb = Items.Where(u => currentUrl.Contains(u.ItemName.EngName, StringComparison.OrdinalIgnoreCase) ||
                                                currentUrl.Contains(u.ParentName.EngName, StringComparison.OrdinalIgnoreCase) ||
                                                currentUrl.Contains(u.RootName.EngName, StringComparison.OrdinalIgnoreCase)).FirstOrDefault();
        }
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

@code {
    public List<SearchItem> Items = new List<SearchItem>();
    public List<SearchItem> searchItems = new List<SearchItem>();
    string? searchText { get; set; }
    public SearchItem breadcrumb = null;
    private async Task GenerateSearchArea(string searchtext)
    {
        searchText = searchtext;
        searchItems = new();
        if (!string.IsNullOrEmpty(searchtext)){
            searchItems = Items.Where(u => u.ItemName.VietName.Contains(searchtext, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }
}

@code {
    string NavbarStyle { get; set; } = string.Empty;
    string ContentStyle { get; set; } = string.Empty;
    private static Boolean bigWindowSize = false;
    private void UpdateValue(object sender, bool isDesktop)
    {
        bigWindowSize = isDesktop;
        if (!isDesktop)
        {
            NavbarStyle = "sidebar-hidden";
        }
        else
        {
            NavbarStyle = "";
        }
        StateHasChanged();
    }
    private async Task ToggleNavbar()
    {
        if (!NavbarStyle.Contains("sidebar-hidden"))
        {
            if (!bigWindowSize)
            {
                NavbarStyle = "sidebar-hidden";
                ContentStyle = "content-mobile-show";
            }
            else
            {
                NavbarStyle = "sidebar-hidden";
                ContentStyle = "";
            }
        }
        else
        {
            if (!bigWindowSize)
            {
                NavbarStyle = "sidebar-mobile";
                ContentStyle = "content-mobile";
            }
            else
            {
                NavbarStyle = "";
                ContentStyle = "";
            }
        }
    }
}

@code {
    private async Task TitleOnClick()
    {
        if (!NavbarStyle.Contains("sidebar-hidden") && !bigWindowSize)
        {
            NavbarStyle = "sidebar-hidden";
            ContentStyle = "content-mobile-show";
        }
    }
}

@code{
    MarkupString StatusDot { get; set; } = new MarkupString("<span class='status-icon me-1 rounded-circle d-inline-block' b-v2bewct92u></span>");
    MarkupString StatusBadge { get; set; } = new MarkupString("<span class='badge priority-new' title='Ưu tiên {1}' b-v2bewct92u>New</span>");
}
