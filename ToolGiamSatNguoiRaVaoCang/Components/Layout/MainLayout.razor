@using BlazorBootstrap
@using DevExpress.Blazor.Internal
@using ToolGiamSatNguoiRaVaoCang.Services
@using ToolGiamSatNguoiRaVaoCang.StaticData
@using ToolGiamSatNguoiRaVaoCang.Utilities
@implements IDisposable
@inject IJSRuntime _JS
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject SizeListener sizeListener


<div class="page">
    <div class="header">
        <div class="header-item toggle-button-container">
            <button class="toggle-button bi bi-list" @onclick="ToggleNavbar" />
        </div>
        <div class="header-item logo">
            <NavLink href="@UrlGenerator.GetUrl("/", true)" class="nav-link">
                <img src="/images/logo.png" width="97" height="35" alt="logo" />
            </NavLink>
        </div>
        <div class="header-item">
            <NavLink href="@UrlGenerator.GetUrl("/", true)" class="nav-link">
                <DxButton RenderStyle="ButtonRenderStyle.None"
                Text="LAIP"
                CssClass="title" />
            </NavLink>
        </div>
        <div class="flex-space header-item" />
        <AuthorizeView Context="AuthContext">
            <Authorized>
                <div class="header-item header-item-right">
                    <NavLink href="Account/Manage">
                        <DxButton RenderStyle="@ButtonRenderStyle.Primary"
                        Text="@AuthContext.User.Identity?.Name"
                        CssClass="menu-button-nav"
                        RenderStyleMode="@ButtonRenderStyleMode.Outline"
                        IconCssClass="bi bi-person-circle user"></DxButton>
                    </NavLink>
                </div>
                <div class="header-item header-item-right">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="" />
                        <DxButton RenderStyle="@ButtonRenderStyle.Primary"
                        SubmitFormOnClick="true" Text="Log out"
                        RenderStyleMode="@ButtonRenderStyleMode.Outline"
                        CssClass="menu-button-nav logout"
                        IconCssClass="bi bi-box-arrow-left"></DxButton>
                    </form>

                </div>
            </Authorized>
            <NotAuthorized>
                <div class="header-item header-item-right">
                    <NavLink href="Account/Register">
                        <DxButton RenderStyle="@ButtonRenderStyle.Primary"
                        Text="Register"
                        RenderStyleMode="@ButtonRenderStyleMode.Outline"
                        CssClass="menu-button-nav register"
                        IconCssClass="bi bi-r-circle"></DxButton>
                    </NavLink>
                </div>
                <div class="header-item header-item-right">
                    <NavLink href="Account/Login">
                        <DxButton RenderStyle="@ButtonRenderStyle.Primary"
                        Text="Log in"
                        RenderStyleMode="@ButtonRenderStyleMode.Outline"
                        CssClass="menu-button-nav login"
                        IconCssClass="bi bi-box-arrow-in-right"></DxButton>
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </div>
    <div class="body">
        <div id="body-side-navbar" class="@NavbarStyle">
            <div id="search-box-area">
                <DxTextBox @bind-Text="@searchText"
                BindValueMode="BindValueMode.OnInput"
                NullText="Tìm kiếm"
                CssClass="search-box"
                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto">
                    <Buttons>
                        <DxEditorButton IconCssClass="icon icon-search" CssClass="search-button" />
                    </Buttons>
                </DxTextBox>
            </div>
            <div id="expanded-menu">
                <DxTreeView AnimationType="LayoutAnimationType.Slide">
                    <Nodes>
                        <DxTreeViewNode NavigateUrl="/" Text="Dashboard" />
                        <DxTreeViewNode Text="Danh mục">
                            <Nodes>
                                <DxTreeViewNode NavigateUrl="/company" Text="Công ty" AllowSelection="true" />
                                <DxTreeViewNode NavigateUrl="/shift" Text="Ca làm việc" AllowSelection="true" />
                                <DxTreeViewNode NavigateUrl="/zonetype" Text="@(bigWindowSize.ToString())" AllowSelection="true" />
                            </Nodes>
                        </DxTreeViewNode>
                    </Nodes>
                </DxTreeView>
            </div>
            <div id="side-navbar-footer">
                <div id="footer-item-1">Version: 1.0</div>
                <div id="footer-item-2">Copyright: © 2024-2025</div>
            </div>
        </div>
        <div id="body-content" class="@ContentStyle">
            <div class="navigator">
                <a href="@UrlGenerator.GetUrl("/", true)" class="navigator-item">Home</a>
                @if (breadcrumb != null)
                {
                    <i class="bi bi-caret-right-fill navigator-item"></i>
                    <a class="navigator-item">@breadcrumb.ParentName</a>
                    <i class="bi bi-caret-right-fill navigator-item"></i>
                    <a class="navigator-item">@breadcrumb.VietName</a>
                }
            </div>
            <div class="content">
                @Body
            </div>
        </div>
    </div>
</div>


<script>
    function MenuToggle(){
    if(document.getElementById("body-side-navbar").style.display==="flex"){     /* Rút */
    if(window.matchMedia("(max-width: 777px)").matches){
    document.getElementById("body-side-navbar").style.display="none";
    document.getElementById("body-content").style.display="block";
    }else{
    document.getElementById("body-side-navbar").style.display="none";
    }
    }else{                                                                  /* Xả */
    if(window.matchMedia("(max-width: 777px)").matches){
    document.getElementById("body-side-navbar").style.display="flex";
    document.getElementById("body-content").style.display="none";
    }else{
    document.getElementById("body-side-navbar").style.display="flex";
    }
    }
    }
</script>

@code {
    public string? searchText { get; set; }

    private string? currentUrl;

    [SupplyParameterFromQuery(Name = UrlGenerator.ToggleSidebarName)]
    public bool TitleOnClick { get; set; }

    protected override async void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            sizeListener.Init(_JS);
            sizeListener.Size += UpdateValue;
        }
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        breadcrumb = null;
        if (!bigWindowSize && !TitleOnClick)
        {
            await _JS.InvokeVoidAsync("MenuToggle");
        }
        @if (!string.IsNullOrEmpty(currentUrl))
        {
            breadcrumb = BreadCrumbList.Where(u => u.EngName.Contains(currentUrl, StringComparison.OrdinalIgnoreCase)).FirstOrDefault();
        }
        TitleOnClick = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

@code {
    public BreadCrumb breadcrumb { get; set; }
    public List<BreadCrumb> BreadCrumbList { get; set; } = new List<BreadCrumb>
        {
            new BreadCrumb {ParentName = "Danh mục", VietName = "Công ty", EngName="Company" },
            new BreadCrumb {ParentName = "Danh mục", VietName = "Ca làm việc", EngName="Shift" }
        };
}

@code {
    string NavbarStyle { get; set; } = string.Empty;
    string ContentStyle { get; set; } = string.Empty;
    private static Boolean bigWindowSize = false;
    private void UpdateValue(object sender, bool isDesktop)
    {
        bigWindowSize = isDesktop;
        if (!isDesktop){
            NavbarStyle = "sidebar-hidden";
        }else{
            NavbarStyle = "";
        }
        StateHasChanged();
    }
    private async Task ToggleNavbar()
    {
        if (!NavbarStyle.Contains("sidebar-hidden"))
        {
            if (!bigWindowSize){
                NavbarStyle = "sidebar-hidden";
                ContentStyle = "content-mobile-show";
            }else{
                NavbarStyle = "sidebar-hidden";
                ContentStyle = "";
            }
        }
        else
        {
            if (!bigWindowSize)
            {
                NavbarStyle = "sidebar-mobile";
                ContentStyle = "content-mobile";
            }
            else
            {
                NavbarStyle = "";
                ContentStyle = "";
            }
        }
    }
}
